# Discrete-time population models

So far we have assumed that the rate of change of the population number has no explicit time dependence. However births and also deaths often happen on an annual cycle. Many fish have their spawning season in the spring, and many birds breed in the summer and annual plants produce their seed and then die in winter. In this case, the rate of change of the population number is not constant, but depends on the time of the year. We can model this by introducing a time dependence in the birth and death rates. However this will lead to equations that will be difficult to analyse. Instead we can give up on the idea of modelling the population numbers continuously through time and instead only follow how the population changes from year to year. 

So we will use models of the form
$$
N_{t+1} = f(N_t)
$$ {#eq-discrete_time}
where $N_t$ is the population number at time $t$ and $f$ is some function. Time $t$ now takes on only integer values, and the population number is only defined at these times. This is called a discrete-time model. Given the initial population number $N_0$, we can calculate the population number at any future time $t$ by iterating the function $f$: $N_1 = f(N_0)$, $N_2 = f(N_1)=f(f(N_0)),\ldots N_t = f(f(\ldots f(N_0)\ldots))$.


## Learning Objectives {.unnumbered}

After completing this chapter, you should be able to:

1. **Mathematical Modeling**
   - Write down difference equations for population dynamics
   - Identify and interpret key parameters in discrete-time models
   - Solve basic discrete-time population models

2. **Model Analysis**
   - Find fixed points of discrete-time models
   - Determine stability using linear analysis and cobweb diagrams
   - Interpret cobweb diagrams
   - Predict long-term behavior of populations

3. **Bifurcations**
   - Identify different types of bifurcations in discrete-time models
   - Analyze how model behavior changes at bifurcation points
   - Understand period-doubling bifurcations unique to discrete systems

4. **Applications**
   - Compare and contrast different discrete-time population models
   - Analyze harvesting strategies in discrete-time models
   - Understand critical depensation in discrete systems
   
## Key Ecological Concepts {.unnumbered}

Before diving into the mathematical models, let's clarify some ecological terminology:

- **Population**: A group of individuals of the same species living in a particular area
- **Carrying capacity**: The maximum sustainable population size in a given environment
- **Critical depensation**: A threshold effect where populations below a certain size tend to decline to extinction
- **Density dependence**: How population growth rates change with population size
- **Seasonal reproduction**: When breeding occurs at specific times of year rather than continuously

These concepts will help explain why we choose particular mathematical forms for our models.

## Exponential model

Just as we started with the exponential model in @sec-continuous, we begin here with the simplest discrete-time model
$$
N_{t+1} = R N_t
$$ {#eq-discrete_exponential}
where $R>0$ is the growth factor. This is the discrete-time version of the continuous-time exponential model. The solution to this equation is
$$
N_t = N_0 R^t.
$$ {#eq-discrete_exponential_solution}
It is important to stress that $R$ is not a growth _rate_ but a dimensionless growth factor. Comparing the discrete-time solution to the continuous-time solution $N(t)=N_0\exp(rt)$ we see that they agree at integer times $t$ if we measure time in years and set 
$$
R=\exp(r \cdot 1\text{ year}).
$$ {#eq-discrete_continuous_relation}
If you are confused by the units, remember that the exponential function is dimensionless, so the argument of the exponential function must be dimensionless. We need the extra factor of 1 year because $r$ is a rate and has dimension 1/time.

The population number grows exponentially with time if $R>1$ and declines exponentially if $R<1$. To get more realistic models we again need to introduce a limited carrying capacity.

::: {#exr-aer}
#### AER
You may be familiar with the distinction between the instantaneous rate $r$ in a continuous-time model and the annual equivalent rate $R$ in the corresponding discrete-time model from your savings account. Assuming that the bank pays interest into your account but you do not withdraw any money, what interest rate $r$ do you need so that the money has increased by 5% after one year, i.e., so that the yearly growth factor is $R=1.05$?
:::

## Logistic model

Recall how we introduced the continuous-time logistic model by assuming that the per-capita birth rate declines linearly with the population number and vanishes when the population reaches its carrying capacity. This gave us the equation
$$
\frac{dN}{dt} = rN\left(1 - \frac{N}{K}\right)
$$ {#eq-recall_logistic}
where $r$ is the per-capita growth rate and $K$ is the carrying capacity. 

It turns out that there are several models which all deserve to be called the discrete-time logistic model. The most famous discrete-time logistic model is the Verhulst model:

$$
\begin{split}
N_{t+1} 
&=N_t + R_0 N_t\left(1 - \frac{N_t}{K}\right)\\
&= (R_0+1)N_t\left(1 - \frac{N_t}{K(R_0+1)/R_0}\right)\\
&= RN_t\left(1-\frac{N_t}{\tilde{K}}\right)=f(N_t),
\end{split}
$$ {#eq-verhulst}
We have written the model in two alternative forms, with $R=R_0+1$ and $\tilde{K}=K(R_0+1)/R_0$, because the first form makes it easier to read off the fixed point, while the second form makes the analogy with the continuous-time logistic model more obvious. @eq-verhulst is also often referred to as the logistic map and is a famous example of a chaotic system.

Again it is important to stress that $R_0$ is not a growth _rate_ but a dimensionless growth factor. We are interested in the case where $R_0>0$ and $K>0$.

A fixed point is a value for which $N_{t+1}=N_t$, i.e. a value of $N$ for which the population number does not change from year to year. Thus it is a value $N^*$ for which $f(N^*)=N^*$. Using the second form of the model, we can see easily that the fixed points are $N^*=0$ and $N^*=K$, so $K$ is the carrying capacity.


## Linear stability analysis

We now want to study the stability of the fixed points in discrete-time models. As discussed, fixed points $N^*$ satisfy the equation $N^*=f(N^*)$. We study the stability of the fixed points by looking at the sequence $N_t$ for $t$ close to the fixed point. That means we write $N(t)=N^*+n_t$ for $n_t<<1$. We then have
$$
\begin{split}
N_{t+1} = N^*+n_{t+1}=f(N_t) = f(N^*+n_t) = f(N^*) + f'(N^*)n_t + \ldots
\end{split}
$$ {#eq-taylor_discrete}
where we have used the Taylor expansion of $f$ around $N^*$. Because $N^*$ is a fixed point, we have $f(N^*)=N^*$. Thus we find that
$$
n_{t+1} \approx f'(N^*)n_t
$$ {#eq-linear_discrete}
where we neglected the higher order terms in the Taylor expansion. This is a linear equation for $n_t$ that we know how to solve:
$$
n_t = n_0 (f'(N^*))^t.
$$ {#eq-linear_discrete_solution}
So we have found that:

* If $|f'(N^*)|<1$, then $n_t$ will decrease with time and the fixed point is stable. 

* If $|f'(N^*)|>1$, then $n_t$ will increase with time and the fixed point is unstable. 

If $|f'(N^*)|=1$, then we cannot say anything about the stability of the fixed point from this analysis.

-------------------------------------------------------------------------

:::{#exr-fpl1}
#### + Stability in Verhulst model
Use the stability criterion that we just derived to derive a condition on
the parameter $R_0$ of the Verhulst model that makes the non-zero fixed point
$N^*=K$ a stable fixed point.
:::

-------------------------------------------------------------------------

##  Cobweb diagrams

In the continuous-time case we also had a graphical way to see the stability of fixed points. We will now introduce a graphical method for studying the stability of fixed points in discrete-time models, called the cobweb method.

We plot the function $f(N_t)$ and the line $N_{t+1}=N_t$. The fixed points are the intersection points of the function and the line. We then draw the graph of the sequence $N_t$ by starting at the initial population number $N_0$ and iterating the function $f(N_t)$ to find $N_1$, then iterating the function again to find $N_2$, and so on. The graph of the sequence $N_t$ is called the cobweb. The stability of the fixed points can be read off from the cobweb. If the cobweb spirals into the fixed point, as shown in @fig-cobweb-stable, then the fixed point is stable. If the cobweb spirals out of the fixed point, as shown in @fig-cobweb-unstable, then the fixed point is unstable. You have to press the play button below the figures to see the cobweb diagrams in action.

``` {python}
#| label: fig-cobweb-stable
#| fig-cap: Cobweb diagram for a stable fixed point.
#| fig-alt: Cobweb diagram for a stable fixed point.
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from IPython.display import HTML

# Define the function
def f(x):
    return x+1.8*x*(1-x)

# Set up the figure and axis
fig, ax = plt.subplots(figsize=(6,3))

# Add axis labels
ax.set_xlabel("$N_t$", loc='right')
ax.set_ylabel("$N_{t+1}$", loc='top')

# Removing numerical labels from the axes
ax.set_xticks([])
ax.set_yticks([])

# Hide the top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Move the bottom spine to y=0 and the left spine to x=0
ax.spines['bottom'].set_position(('data', 0))
ax.spines['left'].set_position(('data', 0))


# Initialize x and y
x, y = 0.8, f(0.8)
# Initialise flag for ignoring first call to animate()
first_call = True

# Animation function
def animate(n):
    global x, y, first_call
    # ignore the first call which is an initialisation call
    if first_call:
        first_call = False
    elif n == 0:
        # Draw initial plots
        x_vals = np.linspace(0, 1.4, 200)
        ax.plot(x_vals, f(x_vals), label='$y=f(N)$')
        ax.plot(x_vals, x_vals, color='black', label='$y=N$')
        # mark the fixed point with a dotted line and a label
        ax.vlines(x=1, ymin=0, ymax=f(1), color='gray', linestyle=':')
        ax.text(1, -0.05, '$N^*$', verticalalignment='top', horizontalalignment='center')
        # add legend
        ax.legend(loc=(0.1, 0.9))
    elif n == 1:
        # On first iteration start on x axis
        # Draw vertical line at x
        ax.plot([x, x], [0, y], color='red')
        # Draw horizontal line at y
        ax.plot([x, y], [y, y], color='red')
    else:
        # Update x and y
        x, new_y = y, f(y)
        # Draw vertical line at x
        ax.plot([x, x], [x, new_y], color='red')
        # Draw horizontal line at y
        ax.plot([x, new_y], [new_y, new_y], color='red')
        y = new_y

# Creating the animation
ani = animation.FuncAnimation(fig, animate, frames=9, repeat=False)

# Display the animation
plt.close()
HTML(ani.to_jshtml())
```

``` {python}
#| label: fig-cobweb-unstable
#| fig-cap: Cobweb diagram for an unstable fixed point.
#| fig-alt: Cobweb diagram for an unstable fixed point.
#| echo: false
# Define the function
def f(x):
    return x+2.5*x*(1-x)

# Set up the figure and axis
fig, ax = plt.subplots(figsize=(6,3))

# Add axis labels
ax.set_xlabel("$N_t$", loc='right')
ax.set_ylabel("$N_{t+1}$", loc='top')

# Removing numerical labels from the axes
ax.set_xticks([])
ax.set_yticks([])

# Hide the top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Move the bottom spine to y=0 and the left spine to x=0
ax.spines['bottom'].set_position(('data', 0))
ax.spines['left'].set_position(('data', 0))


# Initialize x and y
x, y = 0.99, f(0.99)
# Initialise flag for ignoring first call to animate()
first_call = True

# Animation function
def animate(n):
    global x, y, first_call
    # ignore the first call which is an initialisation call
    if first_call:
        first_call = False
    elif n == 0:
        # Draw initial plots
        x_vals = np.linspace(0, 1.4, 200)
        ax.plot(x_vals, f(x_vals), label='$y=f(N)$')
        ax.plot(x_vals, x_vals, color='black', label='$y=N$')
        # mark the fixed point with a dotted line and a label
        ax.vlines(x=1, ymin=0, ymax=f(1), color='gray', linestyle=':')
        ax.text(1, -0.05, '$N^*$', verticalalignment='top', horizontalalignment='center')
        # add legend
        ax.legend(loc=(0.1, 0.9))
    elif n == 1:
        # On first iteration start on x axis
        # Draw vertical line at x
        ax.plot([x, x], [0, y], color='red')
        # Draw horizontal line at y
        ax.plot([x, y], [y, y], color='red')
    else:
        # Update x and y
        x, new_y = y, f(y)
        # Draw vertical line at x
        ax.plot([x, x], [x, new_y], color='red')
        # Draw horizontal line at y
        ax.plot([x, new_y], [new_y, new_y], color='red')
        y = new_y

# Creating the animation
ani = animation.FuncAnimation(fig, animate, frames=20, repeat=False)

# Display the animation
plt.close()
HTML(ani.to_jshtml())
```

The oscillatory nature of the sequence $N_t$, hopping from one side of the fixed point to the other, that creates the cobweb pattern is due to the fact that the slope of $f$ is negative at the fixed point. The graphical method for visualising the iterations will work also when the slope is positive at the fixed point, but it will not look like a cobweb. @fig-cobweb-positive-slope shows the cobweb for a stable fixed point with positive slope.

```{python}
#| label: fig-cobweb-positive-slope
#| fig-cap: Cobweb diagram for a fixed point with positive slope.
#| fig-alt: Cobweb diagram for a fixed point with positive slope.
#| echo: false
# Define the function
def f(x):
    return x+0.8*x*(1-x)

# Set up the figure and axis
fig, ax = plt.subplots(figsize=(6,3))

# Add axis labels
ax.set_xlabel("$N_t$", loc='right')
ax.set_ylabel("$N_{t+1}$", loc='top')

# Removing numerical labels from the axes
ax.set_xticks([])
ax.set_yticks([])

# Hide the top and right spines
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

# Move the bottom spine to y=0 and the left spine to x=0
ax.spines['bottom'].set_position(('data', 0))
ax.spines['left'].set_position(('data', 0))


# Initialize x and y
x, y = 0.5, f(0.5)
# Initialise flag for ignoring first call to animate()
first_call = True

# Animation function
def animate(n):
    global x, y, first_call
    # ignore the first call which is an initialisation call
    if first_call:
        first_call = False
    elif n == 0:
        # Draw initial plots
        x_vals = np.linspace(0, 1.4, 200)
        ax.plot(x_vals, f(x_vals), label='$y=f(N)$')
        ax.plot(x_vals, x_vals, color='black', label='$y=N$')
        # mark the fixed point with a dotted line and a label
        ax.vlines(x=1, ymin=0, ymax=f(1), color='gray', linestyle=':')
        ax.text(1, -0.05, '$N^*$', verticalalignment='top', horizontalalignment='center')
        # add legend
        ax.legend(loc=(0.1, 0.9))
    elif n == 1:
        # On first iteration start on x axis
        # Draw vertical line at x
        ax.plot([x, x], [0, y], color='red')
        # Draw horizontal line at y
        ax.plot([x, y], [y, y], color='red')
    else:
        # Update x and y
        x, new_y = y, f(y)
        # Draw vertical line at x
        ax.plot([x, x], [x, new_y], color='red')
        # Draw horizontal line at y
        ax.plot([x, new_y], [new_y, new_y], color='red')
        y = new_y

# Creating the animation
ani = animation.FuncAnimation(fig, animate, frames=7, repeat=False)

# Display the animation
plt.close()
HTML(ani.to_jshtml())
```

----------------------------------------------------------------------

::: {#exr-discrete_logistic}
#### + Verhulst model
For some choices of the parameters, the Verhulst model
$$
N_{t+1}=RN_t\left(1-\frac{N_t}{\tilde{K}}\right)
$$ {#eq-ex_Verhulst}
can
lead to negative population numbers even when initially starting with a positive population below
its carrying capacity. Derive the condition on the parameters for this to happen. One good
way to approach this is to think about what the cobweb diagram would have to look like for
such a scenario.
:::

----------------------------------------------------------------------


## Other models with limited carrying capacity

You showed in @exr-discrete_logistic that the Verhulst model has the disadvantage that it can give negative population numbers. There are several other models that are discrete-time versions of the logistic model and do not have this problem. We will now look at the two most important of them.

### Ricker model

Many fish species, like salmon, have distinct breeding seasons and their reproduction shows strong density dependence - when population density is too high, fewer offspring survive due to competition for spawning sites. The Ricker model captures this behavior through the equation:

$$
N_{t+1} = N_t\, e^{R_0\left(1 - \frac{N_t}{K}\right)}.
$$ {#eq-ricker}

By moving the logistic factor inside the exponential, the Ricker model prevents negative population numbers. The fixed points are still $N^*=0$ and $N^*=K$. Ricker introduced this model to describe salmon populations.

----------------------------------------------------------------------

::: {#exr-ricker}
#### * Ricker model
Find the fixed points in the Ricker model
$$
N_{t+1} = N_t\, e^{R_0\left(1 - \frac{N_t}{K}\right)}.
$$ {#eq-ex_ricker}
and investigate their stability. Do this both analytically and by drawing cobweb diagrams.
:::

----------------------------------------------------------------------


### Beverton-Holt model

The Beverton-Holt model, introduced by Ray Beverton and Sidney Holt in 1957, was developed to understand fish population dynamics. The model arose from their groundbreaking work on sustainable fisheries management while working at the Fisheries Laboratory in Lowestoft, UK. They were particularly interested in how the number of young fish (recruits) entering a population depends on the number of parent fish (spawning stock).

They proposed the model

$$
N_{t+1} = \frac{R N_t}{1 + \frac{R-1}{K}N_t}.
$$ {#eq-beverton_holt}

This has been a very influential model in fisheries science. On the face of it the model does not look very similar to the logistic model, but we will see the relationship when we solve the model. The trick is to make a change of variables from $N_t$ to $u_t = 1/N_t$. Then we have
$$
u_{t+1} = \frac{1}{N_{t+1}} = \frac{1 + \frac{R-1}{K}N_t}{R N_t} = \frac{u_t}{R} + \frac{R-1}{R K}.
$$ {#eq-beverton_holt_u}
This is a linear equation for $u_t$, and linear equations are easy to solve. The easiest way to proceed is to look at the first few terms of the sequence $u_t$ and guess the general form of the solution. We find
$$\begin{split}
u_1 &= \frac{u_0}{R} + \frac{R-1}{R K},\\
u_2 &= \frac{u_0}{R^2} + \frac{R-1}{R K}\left(1 + \frac{1}{R}\right),\\
u_3 &= \frac{u_0}{R^3} + \frac{R-1}{R K}\left(1 + \frac{1}{R} + \frac{1}{R^2}\right),\\
&\vdots\\
u_t &= \frac{u_0}{R^t} + \frac{R-1}{R K}\left(1 + \frac{1}{R} + \frac{1}{R^2} + \ldots + \frac{1}{R^{t-1}}\right).
\end{split}
$$ {#eq-beverton_holt_u_solution}
The sum in the second term is a geometric series. We know the general formula for a geometric series:
$$
1 + x + x^2 + \ldots + x^{t-1} = \frac{1 - x^t}{1 - x}.
$$ {#eq-geometric_series}

We can use this with $x=1/R$ to sum terms in the second term. We find
$$
u_t = \frac{u_0}{R^t} + \frac{R-1}{R K}\frac{1 - (1/R)^t}{1 - 1/R}.
$$
We simplify this a bit and bring everything on the same denominator.
$$
u_t = \frac{u_0}{R^t} - \frac{(1/R)^t-1}{K}
=\frac{Ku_0-1+R^t}{KR^t}.
$$ {#eq-beverton_holt_u_solution_simplified}


We can now change back to $N_t=1/u_t$ to find the solution to the Beverton-Holt model. We find
$$
\begin{split}
N_t &= \frac{1}{u_t}=\frac{K R^t}{Ku_0-1+R^t}\\
&=\frac{K/u_0}{KR^{-t}-R^{-t}/u_0+1/u_0}\\
&=\frac{KN_0}{N_0+(K-N_0)R^{-t}}.
\end{split}
$$ {#eq-beverton_holt_solution}

This is the solution to the Beverton-Holt model. Comparing this to the solution of the continuous-time logistic model
$$
N(t) = \frac{KN_0}{N_0+(K-N_0)\exp(-rt)}
$$ {#eq-recall_logistic_solution}
we see that they agree at integer times $t$ if we measure time in years and set
$R=\exp(r \cdot 1\text{ year}).$

----------------------------------------------------------------------

#### Beverton-Holt model
::: {#exr-beverton_holt}
Find the fixed points in the Beverton-Holt model
$$
N_{t+1} = \frac{R N_t}{1 + \frac{R-1}{K}N_t}.
$$ {#eq-ex_beverton_holt}
and investigate their stability. Do this both analytically and by drawing cobweb diagrams.
:::

----------------------------------------------------------------------


## Discrete-time harvesting model

We will now look at an example of a discrete-time model with harvesting and apply the techniques we have learned. The model has the standard discrete-time model form $N_{t+1}=f(N_t)$, where $f$ in our example is
$$
f(N) = \frac{b N^2}{1+N^2}-EN.
$$
The constant $b>2$ determines the growth rate of the population and the harvesting rate is determined by the harvesting effort $E$. 

We start by studying the model without harvesting, so we set $E=0$ for now. As usual, we start by looking at the steady states of the model. The fixed points are the solutions to the equation 
$$
N^* = \frac{b\,{N^*}^2}{1+{N^*}^2}.
$$ 
There is the obvious solution $N^*=0$. We can then find the non-zero solutions by dividing both sides by $N^*$ and multiply them by $1+{N^*}^2$ to get the equation
$$
1+{N^*}^2 = bN^*.
$$
This is a quadratic equation for $N^*$, which we could rewrite in the more conventional form
$$
{N^*}^2 - bN^* + 1 = 0.
$$
The solutions to this equation are
$$
N^*_\pm = \frac{b\pm\sqrt{b^2-4}}{2}.
$$
The solutions are real if $b^2-4\geq 0$, i.e. if $b\geq 2$, which we have stipulated earlier. Both solutions are positive. 

We now have enough information to draw a good sketch to understand the dynamics of the model. We can draw the function $f(N)$ and the line $N_{t+1}=N_t$. It may not be immediately obvious what the sketch of $f(N)=bN^2/(1+N^2)$ looks like. We'll reason ourselves through this in steps:

- First let us consider what happens near $N=0$. There the function is approximately $f(N)\approx bN^2$. This is a parabola that opens upwards. The function is zero at $N=0$ and increases quadratically with $N$. 

- Next we consider what happens as $N$ becomes large. There the function is approximately $f(N)\approx b$. So the graph has a horizontal asymptote at $y=b$.

- We know that in between there are two fixed points. That means the graph needs to cross the diagonal line $y=N$ twice.

- Finally we observe that the function is monotonically increasing. 

If we now draw something that has all these features, we will have a sufficiently good sketch of the function for our purpose of understanding the dynamics of the model. We will necessarily end up with something that qualitatively looks like the graph in @fig-discrete-harvesting-function.

```{python}
#| label: fig-discrete-harvesting-function
#| fig-cap: Graph of the function $f(N)=\frac{bN^2}{1+N^2}$.
#| fig-alt: Graph of the function $f(N)=\frac{bN^2}{1+N^2}$.
#| echo: false
from matplotlib.patches import Circle

# Define the function
def f(N, b):
    return b*N**2/(1+N**2)

# Parameter value
b = 2.4

# Fixed points
Np = (b+np.sqrt(b**2-4))/2
Nm = (b-np.sqrt(b**2-4))/2

# Adding axis labels
plt.figure(figsize=(6,3))
plt.xlabel('$N_t$', loc='right')
plt.ylabel('$N_{t+1}$', loc='top')

# Removing numerical labels from the axes
plt.xticks([])  # Removing labels on the horizontal axis
plt.yticks([])  # Removing labels on the vertical axis

# Hide the top and right spines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
# Move the bottom spine to y=0 and the left spine to x=0
ax.spines['bottom'].set_position(('data', 0))
ax.spines['left'].set_position(('data', 0))

# Plot the function
N_vals = np.linspace(0, b*1.2, 200)
plt.plot(N_vals, f(N_vals, b), label='$y=f(N)$')

# Add diagonal
plt.plot(N_vals, N_vals, 'k-', label='$y=N$')

# Add red dot at stable fixed points
circle = Circle((Np,Np), 0.05, color='red', fill=True)
ax.add_patch(circle)
circle = Circle((0,0), 0.05, color='red', fill=True)
ax.add_patch(circle)
# Add red circle at unstable fixed point
circle = Circle((Nm,Nm), 0.05, color='red', fill=False)
ax.add_patch(circle)

# Mark fixed points on x axis
plt.vlines(Np, 0, Np, color='gray', linestyle=':')
plt.text(Np, -0.3, '$N^*_+$', ha='center')
plt.vlines(Nm, 0, Nm, color='gray', linestyle=':')
plt.text(Nm, -0.3, '$N^*_-$', ha='center')

# Add horizontal asymptote
plt.hlines(b, 0, b*1.2, color='gray', linestyle='--', label='$y=b$')

ax.legend(loc='center right')
plt.show()
```

Using our cobweb technique, or simply looking at the slope of $f$ at the fixed points, we can easily convince ourselves that the extinction fixed point is stable, the smaller non-zero fixed point $N^*_-$ is unstable and the larger fixed point $N^*_+$ is stable. in @fig-discrete-harvesting-function we have indicated the stable fixed points by solid circles and the unstable fixed points by open circles. So when the population number is larger than $N^*_-$ it will grow towards $N^*_+$, and when it is smaller than $N^*_-$ it will go extinct. So this model exhibits a strong Allee effect with critical depensation. $N^*_-$ is the smallest viable population size.

We can now add harvesting to the model. The extra term in the function $f(N)$ is $-EN$. This lowers the graph of $f(N)$ by an amount that grows linearly with $N$. This is illustrated in @fig-discrete-harvesting-function-harvesting. 

```{python}
#| label: fig-discrete-harvesting-function-harvesting
#| fig-cap: Graph of the function $f(N)=\frac{bN^2}{1+N^2}-EN$.
#| fig-alt: Graph of the function $f(N)=\frac{bN^2}{1+N^2}-EN$.
#| echo: false
# Define the function
def f(N, b, E):
    return b*N**2/(1+N**2)-E*N

# Parameter value
b = 2.4
E1 = 0.1
E2 = 0.2
E3 = 0.3

# Adding axis labels
plt.figure(figsize=(6,3))
plt.xlabel('$N_t$', loc='right')
plt.ylabel('$N_{t+1}$', loc='top')

# Removing numerical labels from the axes
plt.xticks([])  # Removing labels on the horizontal axis
plt.yticks([])  # Removing labels on the vertical axis

# Hide the top and right spines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
# Move the bottom spine to y=0 and the left spine to x=0
ax.spines['bottom'].set_position(('data', 0))
ax.spines['left'].set_position(('data', 0))

# Plot the function
N_vals = np.linspace(0, b*1.2, 200)
plt.plot(N_vals, f(N_vals, b, 0), label='$E=0$')
plt.plot(N_vals, f(N_vals, b, E1), label='$0<E<E_c$')
plt.plot(N_vals, f(N_vals, b, E2), label='$E=E_c$')
plt.plot(N_vals, f(N_vals, b, E3), label='$E>E_c$')

# Add diagonal
plt.plot(N_vals, N_vals, 'k-',)

ax.legend(loc=(0.1,0.6))
plt.show()
```
We see that as the harvesting effort $E$ increases, the two fixed points move closer together. At a critical value $E_c$ the two fixed points merge and disappear. The population number will then go extinct for all initial population numbers. 

Let us find the critical value $E_c$. For that we first determine the location of the fixed points in the presence of harvesting. So we solve the equation
$$
N^* = \frac{b\,{N^*}^2}{1+{N^*}^2}-EN^*.
$$
Again this has a solution $N^*=0$. We can then find the non-zero solutions by dividing both sides by $N^*$ and multiply them by $1+{N^*}^2$ to get the equation
$$
(1+E){N^*}^2-bN^*+1+E = 0.
$$
This is solved by
$$
N^*_\pm = \frac{\frac{b}{1+E}\pm\sqrt{\left(\frac{b}{1+E}\right)^2-4}}{2}.
$$
We see that these solutions are real only if $\left(\frac{b}{1+E}\right)^2-4\geq 0$, i.e., if $E< \frac{b-2}{2}$. Thus the critical effort is $E_c=\frac{b-2}{2}$. Fishing above this level will lead to extinction of the population. But even fishing just near this level is risky because the population number will be very close to the minimum viable population and a small disturbance could lead to extinction.



