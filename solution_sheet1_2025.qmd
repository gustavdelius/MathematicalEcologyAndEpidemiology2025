---
title: Solutions for assignment 1
subtitle: Mathematical Ecology
format:
  pdf:
    papersize: a4
    geometry: margin=2.54cm
---

#### Immigration
**Exercise 1.1**
Let us try to model the population of a country with currently $N_0=70$ million
inhabitants. Let us assume that the per-capita death rate is $d = 0.015$ deaths per year and the
per-capita birth rate is $b=0.01$ births per year. In addition there is a constant rate of immigration
of $a=300,000$ individuals per year. 

i) Write down the ODE for the population number $N(t)$. At this point, do not
 use the numerical values yet but the symbols.
 
ii) Solve the ODE for $N(t)$ with the given initial condition. You may not have solved an ODE for some while so may need to look back at your Calculus notes. But don't panic: the equation from part (i) should be a linear, non-homogeneous, first-order ODE with constant coefficients, so you definitely know how to solve it. The easiest way to go about it is to first convert it into a homogeneous ODE by shifting the dependent variable.

iii) Substitute the numerical values to obtain the projected population after
$10$ years.

**Solutions**

i) The ODE for the population number $N(t)$ is
$$
\frac{dN}{dt} = rN + a
$$
where $r=b-d$ is the net growth rate.

ii) To solve the ODE we first convert it into a homogeneous ODE by shifting the dependent variable. We set $M(t)=N(t)+a/r$ and obtain
$$
\frac{dM}{dt} = rM.
$$
The solution to this ODE is $M(t) = M(0)e^{rt}$. Substituting back we get
$$
N(t) = \left(N(0) + \frac{a}{r}\right)e^{rt} - \frac{a}{r}.
$$

iii) Substituting the numerical values we get
$$
\begin{split}
N(10)&=\left(70\,000\,000 + \frac{300\,000}{0.01-0.015}\right)e^{(0.01-0.015)\cdot 10} - \frac{300\,000}{0.01-0.015}\\
&=\left(70\,000\,000 + \frac{300\,000}{-0.005}\right)e^{-0.05} - \frac{300\,000}{-0.005}\\
&=\left(70\,000\,000 - 60\,000\,000\right)e^{-0.05} + 60\,000\,000\\
&\approx 10\,000\,000 \cdot 0.9512294 + 60\,000\,000\\
&\approx 69\,512\,294.
\end{split}
$$


#### Sketching solutions
**Exercise 1.3**
Consider the population model with carrying capacity and Allee effect given by the differential equation
$$
\frac{dN}{dt}=rN\left(1-\frac{N}{K}\right)\left(\frac{N}{K_0}-1\right).
$$
Here $r>0$, $K>K_0>0$ are constants. Simply by considering the shape of the right hand side, sketch a graph of $N(t)$ against $t$ for several solutions with different initial conditions. Include two initial conditions between $0$ and $K_0$, two initial conditions between $K_0$ and $K$ and one initial condition larger than $K$. Note that the graph only needs to be qualitatively correct, similar to the rough sketch for the solutions of the logistic model sketched in the first lecture.

**Solutions**

First we make a sketch of the right-hand side of the ODE. The right-hand side is a cubic polynomial with roots at $N=0$, $N=K$ and $N=K_0$. The coefficient of the cubic term is positive, so the graph is a cubic with positive leading coefficient. This gives us a sketch that will qualitatively look like @fig-sketch-solutions1.

```{python}
#| label: fig-sketch-solutions1
#| fig-cap: Plot of the rate of change.
#| fig-alt: Plot of the rate of change.
#| echo: false
import numpy as np
import matplotlib.pyplot as plt

plt.rcParams.update({'font.size': 14})  # Increase the font size

# Parameters for the Allee growth model
r = 0.1 # Growth rate
K = 100 # Carrying capacity
K0 = 50 # Allee threshold

# Population values
N = np.linspace(0, K*1.2, 100)
# Allee growth rate equation: dN/dt = rN(1 - N/K)(N/K0 - 1)
growth_rate = r * N * (1 - N / K) * (N / K0 - 1)

# Creating the plot
plt.figure(figsize=(4, 2))
plt.plot(N, growth_rate, label='dN/dt = rN(1 - N/K)(N/K0 - 1)')

# Adding axis labels
plt.xlabel('$N$', loc='right')
plt.ylabel('$dN/dt$', loc='top')

# Removing numerical labels from the axes
plt.xticks([])  # Removing labels on the horizontal axis
plt.yticks([])  # Removing labels on the vertical axis

# Hide the top and right spines
ax = plt.gca()
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
# Move the bottom spine to y=0 and the left spine to x=0
ax.spines['bottom'].set_position(('data', 0))
ax.spines['left'].set_position(('data', 0))

# Placing a red circle at N = K0 and a red dot at N = K and N=0
# on the N axis and labeling them
plt.plot(K0, 0, 'ro', fillstyle='none')  # Red circle at N = K0
plt.text(K0, -0.03 * max(growth_rate), '$K_0$', color='red', verticalalignment='top', horizontalalignment='center')
plt.plot(0, 0, 'ro')  # Red dot at N = 0
plt.text(0, -0.03 * max(growth_rate), '$0$', color='red', verticalalignment='top', horizontalalignment='center')
plt.plot(K, 0, 'ro')  # Red dot at N = K
plt.text(K, -0.03 * max(growth_rate), '$K$', color='red', verticalalignment='top', horizontalalignment='center')
plt.ylim(bottom=-1)

plt.show()
```

To sketch solutions you have to draw lines that have a slope given by the rate of change which is the height of the plot in @fig-sketch-solutions1. The slope of the solution is positive when the rate of change is positive and negative when the rate of change is negative. The slope is zero at the points $N=0$, $N=K$ and $N=K_0$. The solution will be increasing when the slope is positive and decreasing when the slope is negative. The solution will be concave down when the slope is decreasing and concave up when the slope is increasing. This leads to a sketch qualitatively similar to the one in @fig-sketch-solutions2.

```{python}
#| label: fig-sketch-solutions2
#| fig-cap: Plot of several solutions.
#| fig-alt: Plot of several solutions.
#| echo: false
from scipy.integrate import solve_ivp

# Define the differential equation
def population_model(t, N, r, K, K0):
    return r * N * (1 - N/K) * (N/K0 - 1)

# Parameters
r = 0.1 # Growth rate
K = 100 # Carrying capacity
K0 = 50 # Allee threshold
N0_conditions = [20, 45, 55, 80, 120] # Initial conditions

# Time span
t_span = (0, 100)
t_eval = np.linspace(*t_span, 1000)

# Solve the differential equation for each initial condition
solutions = []
for N0 in N0_conditions:
    sol = solve_ivp(population_model, t_span, [N0], args=(r, K, K0), t_eval=t_eval)
    solutions.append(sol.y[0])

# Plotting
plt.rcParams.update({'font.size': 12})  # Increase the font size

plt.figure(figsize=(6, 3))
for i, sol in enumerate(solutions):
    plt.plot(t_eval, sol)

plt.axhline(K, color='k', linestyle='--', label='K (Carrying capacity)')
plt.axhline(K0, color='r', linestyle='--', label='K0 (Allee threshold)')
plt.xlabel('$t$', loc='right')
plt.ylabel('$N$', loc='top')

# Removing numerical labels from the axes
plt.xticks([])  # Removing labels on the horizontal axis
plt.yticks([])  # Removing labels on the vertical axis

# Labeling the fixed points
plt.text(-9, K, '$K$', verticalalignment='center', horizontalalignment='center')
plt.text(-9, K0, '$K_0$', verticalalignment='center', horizontalalignment='center')
plt.text(-9, 0, '$0$', verticalalignment='center', horizontalalignment='right')

plt.ylim(0, max(N0_conditions)+10)
plt.grid(True)
plt.legend()
plt.show()
```


#### Harvesting in Gompertz model
**Exercise 1.5**
Consider a population $N(t)$ that is described by the by the Gompertz model
$$
\frac{dN}{dt} = \alpha N \log\frac{K}{N},
$$
where $\alpha$ and $K$ are positive constants. You want to harvest this population, for example
by hunting or fishing, with some effort $E$. The rate at which you harvest individuals (which removes them from
the population and hence results in an additional source of death) is proportional to the size of the population:
$Y = E N$. This is called the yield.  Write down the differential equation for $N(t)$ including this harvesting term. Determine the
fixed points and their stability. Find the maximum sustainable yield, i.e., the maximum yield that can be sustained indefinitely.

**Solutions**

If we harvest with a fixed effort $E$, the population is described by the equation
$$
\frac{dN}{dt} = \alpha N \log\frac{K}{N} - EN=f(N).
$$
To find the maximum sustainable yield we first need to find the non-zero fixed point of this equation by solving
$$
0 = \alpha N^* \log\frac{K}{N^*} - EN^*.
$$
There is a fixed point at zero, but this will not be relevant for the maximum sustainable yield. To find the non-zero fixed point we can divide out one factor of $N^*$ to get
$$
0 = \alpha \log\frac{K}{N^*} - E.
$$
This we can solve for $N^*$:
$$
N^* = K\exp\left(-\frac{E}{\alpha}\right).
$$
To see that this fixed point is stable we just have to observe that the graph of the right-hand side of the equation crosses the x-axis from above to below at $N^*$. This is so because $dN/dt$ becomes negative when $N$ is larger than $N^*$ and positive when $N$ is smaller than $N^*$. We could also explicitly calculate $f'(N^*)$ but that is more work.

The yield at this fixed point is
$$
Y^* = E\,K\exp\left(-\frac{E}{\alpha}\right).
$$
To find the effort that maximises this yield we solve
$$
0=\frac{dY^*}{dE}=K\left(1-\frac{E}{\alpha}\right)\exp\left(-\frac{E}{\alpha}\right).
$$
This gives $E=\alpha$ and thus the maximum sustainable yield ($MSY$) is
$$
MSY = \alpha\,K\,e^{-1}.
$$


#### Discrete-time Ricker model
**Exercise 2.4**
Find the fixed points in the Ricker model
$$
N_{t+1} = N_t\, e^{R_0\left(1 - \frac{N_t}{K}\right)}.
$$
and investigate their stability. Do this both analytically and by drawing cobweb diagrams.
Allow also negative values of 
 in your analysis, even though this is not ecologically realistic. Note that you will then need at least three cobweb diagrams because there are then two bifurcations.

**Solutions**

The fixed points are the solutions to
$$
N^* = N^*\, e^{R_0\left(1 - \frac{N^*}{K}\right)}=:f(N^*).
$$
This equation has the obvious solutions $N^*=0$. To find the non-zero solution we divide both sides by $N^*$ to get
$$
1 = e^{R_0\left(1 - \frac{N^*}{K}\right)}.
$$
Because the exponential can be equal to $1$ only if the exponent is zero, we can solve for $N^*$:
$$
N^* = K.
$$
Next we determine the stability of the fixed points by calculating $f'(N^*)$. We have
$$
f'(N^*) = R_0 e^{R_0\left(1 - \frac{N^*}{K}\right)}\left(1 - \frac{N^*R_0}{K}\right).
$$
For the zero fixed point we have $f'(0) = e^{R_0}$. So if $R_0>0$ we have $f'(0)>1$ and the fixed point is unstable. If $R_0<0$ we have $f'(0)<1$ and the fixed point is stable. 

For the non-zero fixed point we have $f'(K) = 1-R_0$. So if $R_0\in(0,2)$ we have $|f'(K)|<1$ and the fixed point is stable. At $R_0=2$ the fixed point becomes unstable in a period-doubling bifurcation. This can also be seen from the cobweb diagram in @fig-ricker-cobweb.


```{python}
#| label: fig-ricker-cobweb
#| fig-cap: Cobweb diagrams for the Ricker model.
#| fig-alt: Cobweb diagrams for the Ricker model.
#| echo: false

def ricker_model(N, R):
    return N * np.exp(R * (1 - N))

def plot_cobweb(R, ax, steps=100, N0=0.1):
    # Set up the figure for plotting
    N_values = np.linspace(0, 1.5, 400)
    ax.plot(N_values, ricker_model(N_values, R), 'r')
    ax.plot(N_values, N_values, 'k--')
    # Adding axis labels
    ax.set_xlabel('$N_t$', loc='right')
    ax.set_ylabel('$N_{t+1}$', loc='top')
    # Removing numerical labels from the axes
    ax.set_xticks([])  # Removing labels on the horizontal axis
    ax.set_yticks([])  # Removing labels on the vertical axis
    # Hide the top and right spines
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    # Move the bottom spine to y=0 and the left spine to x=0
    ax.spines['bottom'].set_position(('data', 0))
    ax.spines['left'].set_position(('data', 0))
    
    # Cobweb iteration
    N = N0
    for i in range(steps):
        N_next = ricker_model(N, R)
        # Plot the lines for cobweb
        if i==0:
            ax.plot([N,N], [0, N_next], 'b')
        else:
            ax.plot([N, N], [N, N_next], 'b')
        ax.plot([N, N_next], [N_next, N_next], 'b')
        N = N_next

    ax.set_title(f'$R_0={R}$')

fig, axes = plt.subplots(3, 1, figsize=(5, 9))

# Define initial conditions
R_values = [-1, 1.8, 2.2]  # One value for each condition
N0_values = [0.9, 0.1, 0.9]

for ax, R, N0 in zip(axes, R_values, N0_values):
    plot_cobweb(R, ax, steps = 30, N0 = N0)

plt.tight_layout()
plt.show()
```

